import java.util.Scanner;

class Main {
    static void mainMenu() {
        String menu = """
            What would you like to do?
                    (1) Generate a new blockchain from a set of input file(s). Writes blockchain to disk on completion.
                    (2) Read and print a blockchain from a serialized output file, generated by option 1
                    (3) Generate proof of membership for an account within a blockchain serialized output file, generated by option 1
                    (0) Exit
                """;
        System.out.print(menu);

        Scanner stdin = new Scanner(System.in);
        while (stdin.hasNextLine()) {
            String l = stdin.nextLine();
            switch (l) {
            case "1":
                newBlockchainMenu();
                break;
            case "2":
                readOutfileMenu();
                break;
            case "3":
                pomMenu();
                break;
            case "0":
                System.exit(0);
            default:
                System.out.println("Invalid option");
                mainMenu();
            }
        }
        stdin.close();
    }

    static void pomMenu() {
        System.out.println("Enter the name of a blockchain outfile to be read.");
        System.out.println("Note: if you are using my test data, you may use 'ledger4.block.out'");
        Scanner stdin = new Scanner(System.in);
        String outFile = stdin.nextLine();
        Blockchain bc;
        try {
            bc = FileMan.readBlockchain(outFile);
        } catch (Exception e) {
            System.out.println(e);
            readOutfileMenu();
            stdin.close();
            return;
        }
        System.out.println("Valid blockchain: " + bc.verify());

        System.out.println("Enter an account number to find the user's balance and proof of membership");
        System.out.println("Note: if you are using my test data, you may use 'vljljljhw34jth34ljh5l23j4hl3j4h6l4j6j0d4'");
        String account = stdin.nextLine();
        System.out.println("\nPROOF OF MEMBERSHIP: ");
        POM pom = bc.balance(account);
        System.out.println(pom);
        stdin.close();
    }

    static void readOutfileMenu() {
        System.out.println("Enter the name of a blockchain outfile to be read, printed, validated, and tested.");
        System.out.println("Note: if you are using my test data, you may use 'ledger4.block.out'");
        Scanner stdin = new Scanner(System.in);
        String outFile = stdin.nextLine();
        Blockchain bc;
        try {
            bc = FileMan.readBlockchain(outFile);
        } catch (Exception e) {
            System.out.println(e);
            readOutfileMenu();
            stdin.close();
            return;
        }
        System.out.println(bc.toString(true));
        System.out.println("Valid blockchain: " + bc.verify());
        new TestSuite(outFile).run();
        stdin.close();
    }

    static void newBlockchainMenu() {
        System.out.println("Enter a space-separated list of files or a directory name that only contains ledger files");
        System.out.println("Note: If you are using my test data, type 'inputs/', which is a directory of 4 ledger files");
        Scanner stdin = new Scanner(System.in);
        String l = stdin.nextLine();
        if (l.equals("0"))
            System.exit(0);
        Transaction[][] ledgers;
        String outFileName;
        try {
            ledgers = FileMan.readLedgerFiles(l);
            outFileName = FileMan.getFirstInputName(l);
        } catch (Exception e) {
            System.out.println(e);
            newBlockchainMenu();
            stdin.close();
            return;
        }
        Blockchain bc = new Blockchain();
        for (Transaction[] t : ledgers) {
            Block b = new Block(t);
            bc.add(b);
        }
        System.out.println(bc.toString(true));
        try {
            FileMan.writeBlockchain(bc, outFileName);
        } catch (Exception e) {
            System.out.println(e);
            newBlockchainMenu();
            stdin.close();
            newBlockchainMenu();
        }
        stdin.close();
    }

    public static void main(String args[]) {
        mainMenu();
    }
}
